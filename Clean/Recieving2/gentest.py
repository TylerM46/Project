import numpy as np
from PIL import Image

readdata


def binary_to_image(binary_string, width, height, channels):
    # Convert binary string to byte array
    byte_array = bytearray()
    for i in range(0, len(binary_string), 3):
        byte = binary_string[i:i+3]
        byte_array.append(int(byte, 2) * 32)  # Scale back to original color range

    # Convert byte array to numpy array
    img_array = np.array(byte_array, dtype=np.uint8).reshape((height, width, channels))

    # Create and save image
    img = Image.fromarray(img_array, mode='RGB')
    
    img.save('./flip.jpg')
    print("made it")

def extractdata(binary_string, pattern):
    positions = []   #array of instance positions 
    start = 0

    # Find all start positions of the pattern
    while True:
        idx = binary_string.find(pattern, start)
        if idx == -1:
            break
        positions.append(idx)
        start = idx + 1  # allow overlapping

    # Extract sequences between each pair of occurrences
    results = []
    for i in range(len(positions) - 1):
        start_idx = positions[i] + len(pattern)
        end_idx = positions[i + 1]
        results.append(binary_string[start_idx:end_idx])

    return results

def flip_every_5th_bit(binary_str):
    """
    Flips every 5th bit (i.e., indices 4, 9, 14, ...) back to correct errors.
    """
    bit_list = list(binary_str)
    for i in range(4, len(bit_list), 5):
        bit_list[i] = '0' if bit_list[i] == '1' else '1'
    return ''.join(bit_list)


# Example usage
pattern = "110010101010101010101100"
segments = extractdata(readdata, pattern)

#print(segments,len(segments[0]))
sent = flip_every_5th_bit(segments[0])

width = 25 # Replace with actual width
height = 25  # Replace with actual height
channels = 3  # RGB

binary_to_image(sent, width, height, channels)

print(sent, len(sent))

#for i in segments:
#    if i 